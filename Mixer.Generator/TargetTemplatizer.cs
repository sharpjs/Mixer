// Copyright 2023 Subatomix Research Inc.
// SPDX-License-Identifier: ISC

namespace Mixer;

/// <summary>
///   Converts a target type declaration to a compilation unit template
///   containing an empty partial declaration for the target type.
/// </summary>
internal static class TargetTemplatizer
{
    // TARGET TYPES
    // ------------------- ---------------------
    // public              partial        class
    // public static       partial        class
    // ------------------- ---------------------
    // public              partial        struct
    // public readonly     partial        struct
    // public          ref partial        struct
    // public readonly ref partial        struct
    // ------------------- ---------------------
    // public              partial record class  (class keyword is optional)
    // public              partial record struct
    // public readonly     partial record struct
    // ------------------- ---------------------
    // ╰────────┬────────╯ ╰─────────┬─────────╯                  
    //    remove these           keep these
    //      modifiers            modifiers

    public static Target Templatize(INamedTypeSymbol type, TypeDeclarationSyntax node)
    {
        if (type is null)
            throw new ArgumentNullException(nameof(type));
        if (node is null)
            throw new ArgumentNullException(nameof(node));

        var partial = MakePartial(node);
        var ns      = MakeNamespace(partial, type.ContainingNamespace, optionsFrom: node);
        var unit    = MakeCompilationUnit(ns);

        return new(type, unit);
    }

    private static TypeDeclarationSyntax MakePartial(TypeDeclarationSyntax node)
    {
        // Partialize the target itself
        var result = MakePartialCore(node).WithMembers(default);

        // Nest within partial types to match target's nesting
        for (var n = node.Parent; n is not null; n = n.Parent)
            if (n is TypeDeclarationSyntax type)
                result = MakePartialCore(type)
                    .WithMembers(SingletonList<MemberDeclarationSyntax>(result));

        return result;
    }

    private static TypeDeclarationSyntax MakePartialCore(TypeDeclarationSyntax node)
    {
        return node
            .WithModifiers     (GetPartialModifiers(node))
            .WithAttributeLists(default)
            .WithBaseList      (default);
    }

    private static SyntaxTokenList GetPartialModifiers(TypeDeclarationSyntax node)
    {
        return node.Kind() switch
        {
            SyntaxKind.RecordDeclaration or
            SyntaxKind.RecordStructDeclaration
                => TokenList(
                    Token(SyntaxKind.PartialKeyword),
                    Token(SyntaxKind.RecordKeyword)
                ),
            _ // non-record type
                => TokenList(Token(SyntaxKind.PartialKeyword)),
        };
    }

    private static MemberDeclarationSyntax MakeNamespace(
        MemberDeclarationSyntax node,
        INamespaceSymbol        symbol,
        SyntaxNode              optionsFrom)
    {
        if (symbol.IsGlobalNamespace)
            return node;

        var name = Qualify(symbol, alias: null);

        var declaration = SupportsFileScopedNamespaces(optionsFrom)
            ? (BaseNamespaceDeclarationSyntax) FileScopedNamespaceDeclaration(name)
            : (BaseNamespaceDeclarationSyntax) /*Braces*/NamespaceDeclaration(name);

        return declaration.WithMembers(SingletonList(node));
    }

    private static bool SupportsFileScopedNamespaces(SyntaxNode node)
    {
        return node.SyntaxTree.Options is CSharpParseOptions
        {
            LanguageVersion: >= LanguageVersion.CSharp10
        };
    }

    private static CompilationUnitSyntax MakeCompilationUnit(MemberDeclarationSyntax node)
    {
        return CompilationUnit()
        .WithMembers(SingletonList(node.WithLeadingTrivia(
            Comment("// <auto-generated>"),
            Comment("//   This code file was generated by the 'Mixer' NuGet package."),
            Comment("//   See https://github.com/sharpjs/Mixer for more information."),
            Comment("// </auto-generated>"),
            PreprocessingMessage("#nullable enable\r\n") // TODO: Figure out when to do this
        )));
    }
}
