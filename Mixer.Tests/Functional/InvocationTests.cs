// Copyright 2023 Subatomix Research Inc.
// SPDX-License-Identifier: ISC

namespace Mixer.Tests.Functional;

// To cover: MixinGeneralizer.VisitInvocationExpression

[TestFixture]
public class InvocationTests
{
    [Test]
    public void Simple()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source
            {
                void Foo() { Bar(); }
                void Bar() { }
            }

            [Include<Source>]
            partial $target Target { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Foo() { Bar(); }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Bar() { }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void StaticMethod()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using System;
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source
            {
                void Foo()
                {
                    Environment.SetEnvironmentVariable("FOO", "bar");
                }
            }

            [Include<Source>]
            partial $target Target { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Foo()
                {
                    global::System.Environment.SetEnvironmentVariable("FOO", "bar");
                }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void StaticMethodWithUsingStatic()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using static System.Environment;
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source
            {
                void Foo()
                {
                    SetEnvironmentVariable("FOO", "bar");
                }
            }

            [Include<Source>]
            partial $target Target { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Foo()
                {
                    global::System.Environment.SetEnvironmentVariable("FOO", "bar");
                }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void ExtensionMethod()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            public static class Extensions
            {
                public static void AnExtensionMethod(this string s, int _) { }
            }

            [Mixin]
            $source Source
            {
                void Foo()
                {
                    "foo".AnExtensionMethod(42);
                }
            }

            [Include<Source>]
            partial $target Target { }
            """
        )
        .ExpectGeneratedSource(
            // TODO: Fix spacing
            "Test.Target.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Foo()
                {
            global::Test.Extensions.AnExtensionMethod(        "foo",42);
                }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void MethodOnUnknown()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source
            {
                void Foo()
                {
                    unknown.Method();
                }
            }

            [Include<Source>]
            partial $target Target { }
            """
        )
        .ExpectDiagnostic(
            "(10,9): error CS0103: " +
            "The name 'unknown' does not exist in the current context"
        )
        .ExpectGeneratedSource(
            "Test.Target.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Mixer.Generator", "0.0.0.0")]
                void Foo()
                {
                    unknown.Method();
                }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }
}
