// Copyright 2023 Subatomix Research Inc.
// SPDX-License-Identifier: ISC

namespace Mixer.Tests.Functional;

// To cover: MixinOutputBuilder (various methods)

[TestFixture]
public class GenericTargetTests
{
    [Test]
    public void Simple()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<T0, T1> { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target{T0,T1}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<T0, T1>
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void Nested()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            partial $target Outer<T0>
            {
                [Include<Source>]
                partial $target Target<T1> { }
            }
            """
        )
        .ExpectGeneratedSource(
            "Test.Outer{T0}.Target{T1}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Outer<T0>
            {
                partial $target Target<T1>
                {
                }
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void NamedTypeConstraint()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using System;
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<T0, T1>
                where T0 : Attribute, IFormattable, new()
                where T1 : notnull, new()
            { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target{T0,T1}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<T0, T1>
                where T0 : global::System.Attribute, global::System.IFormattable, new()
                where T1 : notnull, new()
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void ClassConstraint()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<T>
                where T : class
            { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target{T}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<T>
                where T : class
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void StructConstraint()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<T>
                where T : struct
            { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target{T}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<T>
                where T : struct
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void UnmanagedConstraint()
    {
        new FunctionalTestBuilder()
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<T>
                where T : unmanaged
            { }
            """
        )
        .ExpectGeneratedSource(
            "Test.Target{T}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<T>
                where T : unmanaged
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }

    [Test]
    public void Variance()
    {
        new FunctionalTestBuilder()
        .WithSourceAndTargetKinds(Class)
        .WithInput(
            """
            using Mixer;

            namespace Test;

            [Mixin]
            $source Source { }

            [Include<Source>]
            partial $target Target<in T0, out T1> { }
            """
        )
        .ExpectDiagnostic(
            "(9,22): error CS1960: " +
            "Invalid variance modifier. " +
            "Only interface and delegate type parameters can be specified as variant."
        )
        .ExpectDiagnostic(
            "(9,29): error CS1960: " +
            "Invalid variance modifier. " +
            "Only interface and delegate type parameters can be specified as variant."
        )
        .ExpectGeneratedSource(
            "Test.Target{T0,T1}.1.g.cs",
            """
            // <auto-generated>
            //   This code file was generated by the 'Mixer' NuGet package.
            //   See https://github.com/sharpjs/Mixer for more information.
            // </auto-generated>

            namespace Test;

            #region Source
            #nullable enable

            partial $target Target<in T0, out T1>
            {
            }

            #nullable restore
            #endregion
            """
        )
        .Test();
    }
}
